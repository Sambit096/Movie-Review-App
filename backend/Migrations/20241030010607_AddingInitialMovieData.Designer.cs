// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieReviewApp.Data;

#nullable disable

namespace MovieReviewApp.Migrations
{
    [DbContext(typeof(MovieReviewDbContext))]
    [Migration("20241030010607_AddingInitialMovieData")]
    partial class AddingInitialMovieData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieReviewApp.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MovieReviewApp.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Description = "A group of explorers embarks on a journey to discover ancient civilizations hidden in the Amazon rainforest.",
                            Genre = "Adventure",
                            Rating = 2,
                            Title = "Future Quest"
                        },
                        new
                        {
                            MovieId = 2,
                            Description = "In a dystopian future, a rogue scientist battles against a corporation that controls the last remaining resources on Earth.",
                            Genre = "Sci-Fi",
                            Rating = 3,
                            Title = "The Last Horizon"
                        },
                        new
                        {
                            MovieId = 3,
                            Description = "Two astronauts develop an unexpected romance while on a mission to a distant planet.",
                            Genre = "Romance",
                            Rating = 1,
                            Title = "Love in the Stars"
                        },
                        new
                        {
                            MovieId = 4,
                            Description = "A woman returns to her hometown to confront the memories of her troubled childhood and reconnect with her family.",
                            Genre = "Drama",
                            Rating = 2,
                            Title = "Echoes of the Past"
                        },
                        new
                        {
                            MovieId = 5,
                            Description = "A former soldier must protect his city from a dangerous gang threatening to take over.",
                            Genre = "Action",
                            Rating = 3,
                            Title = "Warriors of the Night"
                        },
                        new
                        {
                            MovieId = 6,
                            Description = "A young girl discovers a magical forest where she must battle dark forces to save her world.",
                            Genre = "Fantasy",
                            Rating = 0,
                            Title = "Mystic Forest"
                        },
                        new
                        {
                            MovieId = 7,
                            Description = "In a world dominated by technology, a hacker uncovers a conspiracy that could endanger humanity.",
                            Genre = "Thriller",
                            Rating = 2,
                            Title = "Digital Shadows"
                        },
                        new
                        {
                            MovieId = 8,
                            Description = "A team of thieves plans an elaborate heist targeting a high-security bank, but tensions rise as secrets are revealed.",
                            Genre = "Crime",
                            Rating = 3,
                            Title = "The Great Heist"
                        },
                        new
                        {
                            MovieId = 9,
                            Description = "A marine biologist leads an expedition to explore uncharted underwater caves, discovering hidden treasures and dangers.",
                            Genre = "Adventure",
                            Rating = 1,
                            Title = "Beneath the Waves"
                        },
                        new
                        {
                            MovieId = 10,
                            Description = "Two strangers meet by chance and find their lives intertwined in unexpected ways, leading to life-altering choices.",
                            Genre = "Drama",
                            Rating = 2,
                            Title = "Fate's Crossing"
                        });
                });

            modelBuilder.Entity("MovieReviewApp.Models.PaymentGateway", b =>
                {
                    b.Property<int>("GatewayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GatewayId"));

                    b.Property<int>("CVC")
                        .HasColumnType("int");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GatewayId");

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("MovieReviewApp.Models.ShowTime", b =>
                {
                    b.Property<int>("ShowTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowTimeId"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ViewingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowTimeId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("MovieReviewApp.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShowTimeId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("CartId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MovieReviewApp.Models.Ticket", b =>
                {
                    b.HasOne("MovieReviewApp.Models.Cart", null)
                        .WithMany("Tickets")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("MovieReviewApp.Models.Cart", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
